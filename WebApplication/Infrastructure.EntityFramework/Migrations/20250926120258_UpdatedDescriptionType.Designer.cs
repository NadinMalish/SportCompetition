// <auto-generated />
using System;
using Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250926120258_UpdatedDescriptionType")]
    partial class UpdatedDescriptionType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("sq_competitions");

            modelBuilder.HasSequence("sq_doc_types");

            modelBuilder.HasSequence("sq_docs");

            modelBuilder.HasSequence("sq_events");

            modelBuilder.HasSequence("sq_potents");

            modelBuilder.HasSequence("sq_teams");

            modelBuilder.Entity("Domain.Entities.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatuses");
                });

            modelBuilder.Entity("Domain.Entities.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('sq_competitions'::regclass)");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CompetitionType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PotentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegistryDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("competition_pkey");

                    b.HasIndex("EventId");

                    b.HasIndex("PotentId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Domain.Entities.Doc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('sq_docs'::regclass)");

                    b.Property<string>("CommentDoc")
                        .HasColumnType("text")
                        .HasColumnName("comment_doc");

                    b.Property<byte[]>("Docum")
                        .HasColumnType("bytea")
                        .HasColumnName("docum");

                    b.Property<string>("FileName")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("file_name");

                    b.Property<int?>("IdCompetition")
                        .HasColumnType("integer")
                        .HasColumnName("id_competition");

                    b.Property<int?>("IdDocType")
                        .HasColumnType("integer")
                        .HasColumnName("id_doc_type");

                    b.Property<int?>("IdEvent")
                        .HasColumnType("integer")
                        .HasColumnName("id_event");

                    b.Property<string>("NameDoc")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("name_doc");

                    b.HasKey("Id")
                        .HasName("docs_pkey");

                    b.HasIndex("IdCompetition");

                    b.HasIndex("IdDocType");

                    b.HasIndex("IdEvent");

                    b.ToTable("Docs");
                });

            modelBuilder.Entity("Domain.Entities.DocType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('sq_doc_types'::regclass)");

                    b.Property<string>("CommentDoc")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("comment_doc");

                    b.Property<string>("NameDocType")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("name_doc_type");

                    b.HasKey("Id")
                        .HasName("doc_types_pkey");

                    b.HasIndex(new[] { "NameDocType" }, "ukdoctypes_namedoctype")
                        .IsUnique();

                    b.ToTable("DocTypes");
                });

            modelBuilder.Entity("Domain.Entities.EventInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('sq_events'::regclass)");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RegistryDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("event_info_pkey");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Domain.Entities.EventParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ParticipantCompetitionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("ParticipantCompetitionId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("Domain.Entities.Potent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('sq_potents'::regclass)");

                    b.Property<DateTime>("DatReg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dat_reg")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly>("DateBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("firstname");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("gender");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("lastname");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("login");

                    b.Property<string>("Surname")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("potents_pkey");

                    b.ToTable("Potents");
                });

            modelBuilder.Entity("Domain.Entities.Competition", b =>
                {
                    b.HasOne("Domain.Entities.EventInfo", "Event")
                        .WithMany("Competitions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_competition_event_info");

                    b.HasOne("Domain.Entities.Potent", null)
                        .WithMany("Competitions")
                        .HasForeignKey("PotentId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Domain.Entities.Doc", b =>
                {
                    b.HasOne("Domain.Entities.Competition", "Competition")
                        .WithMany("Docs")
                        .HasForeignKey("IdCompetition")
                        .HasConstraintName("fk_docs_competitions");

                    b.HasOne("Domain.Entities.DocType", "DocType")
                        .WithMany("Docs")
                        .HasForeignKey("IdDocType")
                        .HasConstraintName("fk_docs_doctypes");

                    b.HasOne("Domain.Entities.EventInfo", "EventInfo")
                        .WithMany("Docs")
                        .HasForeignKey("IdEvent")
                        .HasConstraintName("fk_docs_events");

                    b.Navigation("Competition");

                    b.Navigation("DocType");

                    b.Navigation("EventInfo");
                });

            modelBuilder.Entity("Domain.Entities.EventInfo", b =>
                {
                    b.HasOne("Domain.Entities.Potent", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entity_info_potent");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("Domain.Entities.EventParticipant", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationStatus", "Status")
                        .WithMany("EventParticipants")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Competition", "ParticipantCompetition")
                        .WithMany()
                        .HasForeignKey("ParticipantCompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParticipantCompetition");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("EventParticipants");
                });

            modelBuilder.Entity("Domain.Entities.Competition", b =>
                {
                    b.Navigation("Docs");
                });

            modelBuilder.Entity("Domain.Entities.DocType", b =>
                {
                    b.Navigation("Docs");
                });

            modelBuilder.Entity("Domain.Entities.EventInfo", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("Docs");
                });

            modelBuilder.Entity("Domain.Entities.Potent", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
